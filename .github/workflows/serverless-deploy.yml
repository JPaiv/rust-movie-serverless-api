name: serverless-movie-api-deploy

on:
  push:
    branches: [main]

env:
  region: eu-west-1
  environment: dev
  ssm_path: serverless/event/bucket-id

jobs:
  terraform-deploy-shared-infrastrucsture:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./shared-infra/dev
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          TF_VAR_ssm_path: ${{ env.ssm_path }}
          TF_VAR_region: ${{ env.region }}
          TF_VAR_environment: ${{ env.environment }}

      # Add just in case there is a locked state
      # - name: 'Unlock terraform state'
      #   run: terraform force-unlock -force <lock_id>

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
        env:
          TF_VAR_ssm_path: ${{ env.ssm_path }}
          TF_VAR_region: ${{ env.region }}
          TF_VAR_environment: ${{ env.environment }}

      - name: Terraform Apply
        id: apply
        run: terraform destroy -auto-approve
        env:
          TF_VAR_ssm_path: ${{ env.ssm_path }}
          TF_VAR_region: ${{ env.egion }}
          TF_VAR_environment: ${{ env.environment }}

      - name: Terraform Output
        id: outputs
        run: terraform output

  serverless-movie-api-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./source-file-download
    needs: terraform-deploy-shared-infrastrucsture
    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Install serverless framework
        run: npm install -g serverless

      - name: Install serverless plugin python-requirements
        run: sls plugin install -n serverless-python-requirements

      - name: Serverless deploy all functions
        run: serverless deploy

      #- name: Serverless remove all functions
      #  run: serverless remove
